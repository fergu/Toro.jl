# These functions implement the Riemann solver functions from Toro Ch 4
using ShockWaves

"""
    toro_constant_A( Œ≥::T, P::T, œÅ::T ) where { T <: AbstractFloat }

Computes and returns the value of the constant "A" in Eq. 4.8

# Arguments
    Œ≥: The ratio of specific heats for the gas
    P: The pressure of the gas
    œÅ: The density of the gas

# Returns
    A value of type T representing the evaluation of the constant "A" in Eq. 4.8

# Equation
    This function evaluated the equation
        2 / ( (Œ≥+1) * œÅ )
    where
        Œ≥ is the ratio of specific heats
        œÅ is the density

# Notes
    The parameter P is passed to this function but is not used. This is done to keep the function signatures for the constants A and B identical.
"""
function toro_constant_A( Œ≥::T, P::T, œÅ::T ) where { T <: AbstractFloat }
    return 2.0 / ( ( Œ≥ + 1.0 ) * œÅ )
end

"""
    toro_constant_B( Œ≥::T, P::T, œÅ::T ) where { T <: AbstractFloat }

Computes and returns the value of the constant "B" in Eq. 4.8

# Arguments
    Œ≥: The ratio of specific heats for the gas
    P: The pressure of the gas
    œÅ: The density of the gas

# Returns
    A value of type T representing the evaluation of the constant "B" in Eq. 4.8

# Equation
    This function evaluated the equation
        ( Œ≥-1 )/( Œ≥+1 ) * P
    where
        Œ≥ is the ratio of specific heats
        P is the pressure

# Notes
    The parameter œÅ is passed to this function but is not used. This is done to keep the function signatures for the constants A and B identical.
"""
function toro_constant_B( Œ≥::T, P::T, œÅ::T ) where { T <: AbstractFloat }
    return ( Œ≥ - 1.0 ) * P / ( Œ≥ + 1.0 )
end

"""
    toro_f‚Çó( P‚ÇÄ::T, Œ≥::T, P::T, œÅ::T ) where { T <: AbstractFloat }
    toro_f·µ£( P‚ÇÄ::T, Œ≥::T, P::T, œÅ::T ) where { T <: AbstractFloat }

Computes and returns the value of the function ùíª (Eqs. 4.6 and 4.7)

# Arguments
    P‚ÇÄ: The test pressure
    Œ≥ : Ratio of specific heats for the gas
    P : The pressure of the gas
    œÅ : The density of the gas

# Returns 
    A value of type T representing the evaluation of Eqs. 4.6 and/or 4.7

# Equation
    Per Proposition 4.2.1, the function ùíª should return
        ( P‚ÇÄ - P ) * ‚àö( A / ( P + B ) )                             { if P‚ÇÄ > P (Shock) }
    or
        ( 2 a ) / ( Œ≥ - 1 ) * [ ( P‚ÇÄ/P )^((Œ≥-1)/2Œ≥) - 1 ]           { if P‚ÇÄ < P (Rarefaction) } 
    where
        P‚ÇÄ is the test pressure
        P is the gas pressure
        Œ≥ is the ratio of specific heats
        a = ‚àö(Œ≥ P/œÅ ) is the speed of sound
        A is the output of toro_constant_A( Œ≥, P, œÅ ) (Eq. 4.8)
        B is the output of toro_constant_B( Œ≥, P, œÅ ) (Eq. 4.8)

# Notes
    toro_f‚Çó and toro_f·µ£ are identical functions. In fact, toro_f·µ£ is simply aliased to toro_f‚Çó.
    These functions are impelmented this way to simplify function structure and make it more clear how the functions align with the equations in the text.
    In the text, there is a function f that is to be minimized, and it consists of functions f·µ£ and f‚Çó, which is the reason for this approach.
"""
function toro_f‚Çó( P‚ÇÄ::T, Œ≥::T, P::T, œÅ::T ) where { T <: AbstractFloat }
    A = toro_constant_A( Œ≥, P, œÅ )
    B = toro_constant_B( Œ≥, P, œÅ )
    if ( P‚ÇÄ > P )
        return ( P‚ÇÄ - P ) * sqrt( A / ( P‚ÇÄ + B ) )
    else
        return ( 2.0 * sqrt( Œ≥ * P / œÅ ) ) / ( Œ≥ - 1.0 ) * ( ( P‚ÇÄ / P )^( ( Œ≥ - 1.0 ) / ( 2.0 * Œ≥ ) ) - 1.0 )
    end
end

"""
    toro_f‚Çó( P‚ÇÄ::T, Œ≥::T, P::T, œÅ::T ) where { T <: AbstractFloat }
    toro_f·µ£( P‚ÇÄ::T, Œ≥::T, P::T, œÅ::T ) where { T <: AbstractFloat }

Computes and returns the value of the function ùíª‚Çó or f·µ£ (Eqs. 4.6 and 4.7)

# Arguments
    P‚ÇÄ: The test pressure
    Œ≥ : Ratio of specific heats for the gas
    P : The pressure of the gas
    œÅ : The density of the gas

# Returns 
    A value of type T representing the evaluation of Eqs. 4.6 and/or 4.7

# Equation
    Per Proposition 4.2.1, the function ùíª‚Çó or f·µ£ should return
        ( P‚ÇÄ - P ) * ‚àö( A / ( P + B ) )                             { if P‚ÇÄ > P (Shock) }
    or
        ( 2 a ) / ( Œ≥ - 1 ) * [ ( P‚ÇÄ/P )^((Œ≥-1)/2Œ≥) - 1 ]           { if P‚ÇÄ < P (Rarefaction) } 
    where
        P‚ÇÄ is the test pressure
        P is the gas pressure
        Œ≥ is the ratio of specific heats
        a = ‚àö(Œ≥ P/œÅ ) is the speed of sound
        A is the output of toro_constant_A( Œ≥, P, œÅ ) (Eq. 4.8)
        B is the output of toro_constant_B( Œ≥, P, œÅ ) (Eq. 4.8)

# Notes
    toro_f‚Çó and toro_f·µ£ are identical functions. In fact, toro_f·µ£ is simply aliased to toro_f‚Çó.
    These functions are impelmented this way to simplify function structure and make it more clear how the functions align with the equations in the text.
    In the text, there is a function f that is to be minimized, and it consists of functions f·µ£ and f‚Çó, which is the reason for this approach.
"""
const toro_f·µ£ = toro_f‚Çó

"""
    toro_f( P‚ÇÄ::T, Œ≥‚Çó::T, P‚Çó::T, œÅ‚Çó::T, u‚Çó::T, Œ≥·µ£::T, P·µ£::T, œÅ·µ£::T, u·µ£::T ) where { T <: AbstractFloat }

Computes and returns the value of the function ùíª (Eq. 4.5)

# Arguments
    P‚ÇÄ: The test pressure
    Œ≥ : Ratio of specific heats for the gas
    P : The pressure of the gas
    œÅ : The density of the gas

    ‚ãÖ Subscripts indicate whether the property is associated with the gas to the left (ùíª‚Çó) or right (ùíª·µ£) of the interface

# Returns 
    A value of type T representing the evaluation of Eq. 4.5

# Equation
    Eq. 4.5 is defined as
        ùíª( P‚ÇÄ, W‚Çó, W·µ£ ) = f‚Çó( P‚ÇÄ, W‚Çó ) + f·µ£( P‚ÇÄ, W·µ£ ) + ( u·µ£ - u‚Çó )
    where
        P‚ÇÄ is the test pressure
        W = [Œ≥, P, œÅ] is the state associated with the left (W‚Çó) or right (W·µ£) of the interface
"""
function toro_f( P‚ÇÄ::T, Œ≥‚Çó::T, P‚Çó::T, œÅ‚Çó::T, u‚Çó::T, Œ≥·µ£::T, P·µ£::T, œÅ·µ£::T, u·µ£::T ) where { T <: AbstractFloat }
    return toro_f‚Çó( P‚ÇÄ, Œ≥‚Çó, P‚Çó, œÅ‚Çó ) + toro_f·µ£( P‚ÇÄ, Œ≥·µ£, P·µ£, œÅ·µ£ ) + u·µ£ - u‚Çó
end

"""
    CenterPressure( Œ≥‚Çó::T, P‚Çó::T, œÅ‚Çó::T, u‚Çó::T, Œ≥·µ£::T, P·µ£::T, œÅ·µ£::T, u·µ£::T ) where { T <: AbstractFloat }

Finds the value of the center pressure, P‚ÇÄ that solves Eq. 4.5 using Eqs 4.6, 4.7, 4.8, and 4.9

# Arguments
    Œ≥: The ratio of specific heats of the gas
    P: The pressure of the gas
    œÅ: The density of the gas
    u: The velocity of the gas

    ‚ãÖ Subscripts indicate whether the property is associated with the gas to the left (ùíª‚Çó) or right (ùíª·µ£) of the interface

# Returns
    A value of type T representing the value of P‚ÇÄ that satisfies Eq. 4.5

# Notes
    As an implementation detail, the root finding algorithm is currently a simple bisection method
"""
function CenterPressure( Œ≥‚Çó::T, P‚Çó::T, œÅ‚Çó::T, u‚Çó::T, Œ≥·µ£::T, P·µ£::T, œÅ·µ£::T, u·µ£::T ) where { T <: AbstractFloat }
    # We need to start off by getting the minimum and maximum pressures
    P‚Çã = min( P‚Çó, P·µ£ ) # The lesser of the two pressures
    P‚Çä = max( P‚Çó, P·µ£ ) # The greater of the two pressures
    
    # Evaluate the function f at the minimum and maximum pressures
    f‚Çã = toro_f( P‚Çã, Œ≥‚Çó, P‚Çó, œÅ‚Çó, u‚Çó, Œ≥·µ£, P·µ£, œÅ·µ£, u·µ£ )
    f‚Çä = toro_f( P‚Çä, Œ≥‚Çó, P‚Çó, œÅ‚Çó, u‚Çó, Œ≥·µ£, P·µ£, œÅ·µ£, u·µ£ )

    # Per Eq. 4.39, there are three ranges for the solution depending on the velocity difference
    # According to section 4.3.1, the function f is monotone and concave down
    # Therefore, depending on the sign of f at the minimum and maximum pressures, we can conclude where the zero crossing must lie
    # Here, we check those 3 possibilities and assign our initial lower (P‚Çã) and upper (P‚Çä) guesses
    if ( ( f‚Çã > 0.0 ) & ( f‚Çä > 0.0 ) ) # Both estimates are > 0. Solution is therefore below P‚Çã, i.e. in the range [ 0, P‚Çã ]
        P‚Çä = P‚Çó
        P‚Çã = 1e-10
    elseif ( ( f‚Çã <= 0.0 ) & ( f‚Çä >= 0.0 ) ) # f‚Çã less than 0 and f‚Çä greater than 0, so zero is between them, i.e. in the range [ P‚Çã, P‚Çä ]
        P‚Çä = P‚Çä
        P‚Çã = P‚Çã
    elseif ( ( f‚Çã < 0.0 ) & ( f‚Çä <= 0.0 ) ) # Both estimates are less than zero, so solution must be greater than P‚Çä, i.e. in the range [ P‚Çä, ‚àû ]
        P‚Çã = P‚Çä
        P‚Çä = 1e10
    end

    # Now we iterate to find the solution
    # For this, a simple bisection method will be used until the upper and lower pressure estimates are within some tolerance
    œµ = 100.0 # Initial error
    œµ‚Çò = 1e-10 # Maximum error
    i = 0 # Iteration number
    i‚Çò = 100 # Maximum number of iterations
    while ( œµ > œµ‚Çò )
        # Check that we haven't exceeded our maximum iterations
        if ( i >= i‚Çò )
            @warn "Failed to converge after $i iterations in ToroSolve (P‚Çã: $(P‚Çã) P‚Çä: $(P‚Çä) œµ: $(œµ))"
            break
        else
            i=i+1
        end

        # Evaluate the function f with our current pressure estimates
        #f‚Çã = toro_f( P‚Çã, Œ≥‚Çó, P‚Çó, œÅ‚Çó, u‚Çó, Œ≥·µ£, P·µ£, œÅ·µ£, u·µ£ )
        #f‚Çä = toro_f( P‚Çä, Œ≥‚Çó, P‚Çó, œÅ‚Çó, u‚Çó, Œ≥·µ£, P·µ£, œÅ·µ£, u·µ£ )
        
        # Center pressure is an average of the left and right values
        P‚ÇÄ = ( P‚Çã + P‚Çä ) / 2.0
        f‚ÇÄ = toro_f( P‚ÇÄ, Œ≥‚Çó, P‚Çó, œÅ‚Çó, u‚Çó, Œ≥·µ£, P·µ£, œÅ·µ£, u·µ£ )

        # Now need to decide how to move our bounds
        if ( f‚ÇÄ > 0.0 ) # If f‚ÇÄ > 0, the solution must lie to the left of P‚ÇÄ, so we reduce P‚Çä to P‚ÇÄ and try again
            P‚Çä = P‚ÇÄ
        else # If f‚ÇÄ <= 0, the solution must lie to the right of P‚ÇÄ, so we increase P‚Çã to P‚ÇÄ and try again
            P‚Çã = P‚ÇÄ
        end

        œµ = abs(f‚ÇÄ) # Our error will just be the value of f‚ÇÄ since that's the root we want to find
    end

    # Iteration is complete
    # P‚ÇÄ is the average of our left and right estimates
    return (P‚Çä + P‚Çã)/2.0
end

"""
    CenterVelocity( P‚ÇÄ::T, Œ≥‚Çó::T, P‚Çó::T, œÅ‚Çó::T, u‚Çó::T, Œ≥·µ£::T, P·µ£::T, œÅ·µ£::T, u·µ£::T ) where { T <: AbstractFloat }

Finds the value of the center (contact surface) velocity using Eq. 4.9 along with the value of P‚ÇÄ found from CenterPressure

# Arguments
    P‚ÇÄ: The pressure in the center region
    Œ≥:  The ratio of specific heats of the gas
    P:  The pressure of the gas
    œÅ:  The density of the gas
    u:  The velocity of the gas

    ‚ãÖ Subscripts indicate whether the property is associated with the gas to the left (ùíª‚Çó) or right (ùíª·µ£) of the interface

# Returns
    A value of type T representing the value of P‚ÇÄ that satisfies Eq. 4.5
"""
function CenterVelocity( P‚ÇÄ::T, Œ≥‚Çó::T, P‚Çó::T, œÅ‚Çó::T, u‚Çó::T, Œ≥·µ£::T, P·µ£::T, œÅ·µ£::T, u·µ£::T ) where { T <: AbstractFloat }
    return 0.5 * ( u‚Çó + u·µ£ ) + 0.5 * ( toro_f·µ£( P‚ÇÄ, Œ≥·µ£, P·µ£, œÅ·µ£ ) - toro_f‚Çó( P‚ÇÄ, Œ≥‚Çó, P‚Çó, œÅ‚Çó ) )
end

"""
    CenterVelocity( Œ≥‚Çó::T, P‚Çó::T, œÅ‚Çó::T, u‚Çó::T, Œ≥·µ£::T, P·µ£::T, œÅ·µ£::T, u·µ£::T ) where { T <: AbstractFloat }

Finds the value of the center (contact surface) velocity using Eq. 4.9 along with the value of P‚ÇÄ found from CenterPressure

# Arguments
    Œ≥:  The ratio of specific heats of the gas
    P:  The pressure of the gas
    œÅ:  The density of the gas
    u:  The velocity of the gas

    ‚ãÖ Subscripts indicate whether the property is associated with the gas to the left (ùíª‚Çó) or right (ùíª·µ£) of the interface

# Returns
    A value of type T representing the value of P‚ÇÄ that satisfies Eq. 4.5

# Notes
    This is a convenience function to compute the center pressure, P‚ÇÄ, as part of the function call rather than having to compute it as a separate step. 
    Generally, it is preferable to call CenterPressure() first and then call the 9 argument version of this function with the result.
"""
function CenterVelocity( Œ≥‚Çó::T, P‚Çó::T, œÅ‚Çó::T, u‚Çó::T, Œ≥·µ£::T, P·µ£::T, œÅ·µ£::T, u·µ£::T ) where { T <: AbstractFloat }
    P‚ÇÄ = CenterPressure( Œ≥‚Çó, P‚Çó, œÅ‚Çó, u‚Çó, Œ≥·µ£, P·µ£, œÅ·µ£, u·µ£ )
    return CenterVelocity( P‚ÇÄ, Œ≥‚Çó, P‚Çó, œÅ‚Çó, u‚Çó, Œ≥·µ£, P·µ£, œÅ·µ£, u·µ£ )
end

"""
    EdgeDensity( P‚ÇÄ::T, Œ≥::T, P::T, œÅ::T, u::T ) where { T <: AbstractFloat }

Finds the value of the density outside the center region

# Arguments
    P‚ÇÄ: The pressure in the center region
    Œ≥ : The ratio of specific heats of the gas in the edge region
    P : The initial pressure of the gas in the edge region
    œÅ : The initial density of the gas in the edge region
    u : The initial velocity of the gas in the edge region

# Returns
    A value of type T representing the density in the edge region. The specific equation used depends on the ratio P‚ÇÄ/P. See Equations section for details.

# Equations
    The exact equation that is evaluated in this function depends on the ratio P‚ÇÄ/P, which determines whether the emitted wave is a shock wave or a rarefaction wave.
    As such, there are two possible cases:

    ‚ãÖ P‚ÇÄ/P > 1 ‚Üí Shock Wave. The equation solved in this case is
        œÅ‚Çô = œÅ‚Çë * œÅ‚Çô/œÅ‚Çë
    where
        œÅ‚Çô is the new edge density
        œÅ‚Çë is the initial edge density before the passage of the shock
    Note: œÅ‚Çô/œÅ‚Çë is calculated using the DensityJump function for a moving shock wave from the ShockWaves package.
    It is a function of
        œÅ‚Çô/œÅ‚Çë = f( Œ≥, P‚ÇÄ/P )
    where
        Œ≥  is the ratio of specific heats for the edge gas
        P‚ÇÄ is the pressure in the center region, such as calculated using CenterPressure()
        P  is the pressure in the edge region, before the passage of the shock wave
    For more information, see the documentation for DensityJump in the ShockWaves package.

    ‚ãÖ P‚ÇÄ/P ‚â§ 1 ‚Üí Rarefaction wave. The equation solved in this case is Eq. 4.23:
        œÅ‚Çô = œÅ‚Çë * ( P‚ÇÄ/P )^( 1/Œ≥ )
    where
        œÅ‚Çô is the new edge density
        œÅ‚Çë is the initial edge density, before the passage of the rarefaction wave
        P‚ÇÄ is the pressure in the center region, such as calculated using CenterPressure()
        P  is the pressure in the edge region, before the passage of the rarefaction wave

# Note
    The argument u is unused, but is kept in the function signature to be consistent with other functions in this package.
"""
function EdgeDensity( P‚ÇÄ::T, Œ≥::T, P::T, œÅ::T, u::T ) where { T <: AbstractFloat }
    if ( P‚ÇÄ > P ) # Shock wave
        return œÅ * DensityRatio( MovingShockWave(), Œ≥, P‚ÇÄ/P )
    else # Rarefaction wave
        return œÅ * ( P‚ÇÄ / P )^( 1 / Œ≥ )
    end
end

export CenterPressure, CenterVelocity, EdgeDensity
